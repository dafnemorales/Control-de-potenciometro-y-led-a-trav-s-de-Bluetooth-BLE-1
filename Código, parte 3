#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>  // Asegúrate de que esta línea esté presente

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;

// UUID para el servicio y la característica
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

void setup() {
  // Inicializa la comunicación serial
  Serial.begin(115200);

  // Configura Bluetooth
  BLEDevice::init("ESP32_Potentiometer");
  pServer = BLEDevice::createServer();
  
  // Inicia el servicio y la característica
  BLEService* pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
                    
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();

  // Inicia la publicidad de Bluetooth
  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->start();
}

void loop() {
  // Lee el valor en el pin analógico
  int rawValue = analogRead(35);
  float voltage = map(rawValue, 0, 4095, 0, 3300) / 1000.0; // Convertir a voltaje

  // Imprime el voltaje en el monitor serial
  Serial.println(voltage, 2);  // Con 2 decimales

  // Convierte el valor de voltaje a cadena para enviar por BLE
  char voltageStr[8];
  dtostrf(voltage, 4, 2, voltageStr);  // Convierte el valor float a string

  // Envía el valor por BLE
  pCharacteristic->setValue(voltageStr);
  pCharacteristic->notify(); // Notifica el valor a los dispositivos conectados

  delay(20); // Espera 1 segundo
}
